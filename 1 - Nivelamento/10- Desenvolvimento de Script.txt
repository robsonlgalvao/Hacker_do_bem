Scripts windows

Codigo desenvolvido para automatizar uma operação

Automação
Padronização de processos
Gerenciamento de Sistemas e Redes
Manipulação de Dados
Personalização e Extensibilidade
Redução de Erros Eficiência e Produtividade

Powershell 
Batch
VBScript
JavaScript

Vantagens

Agilidade	- Automatiza tarefas
Flexibilidade	- pode ser adaptado
Portabilidade	- Executável em difarentes plataformas
Integração	- Comunica-se com outros programas, usando bibliotecas externas


Riscos	- Malware, vulnerabilidade e permissões elevadas
Boa prática:
Verificar origem, integridade, analisar conteúdo e comportamento, limitar permissões e recursos, atualizar e proteger sistemas

#script para listar processos em execução

Get-Process | Format-Table -AutoSize

#script para criar um arquivo zip com os arquivos de uma pasta

$source = "C:\Users\user\Documents"
$destination = "C:\Users\userDocuments.zip"

#scripts para enviar um email

$Outlook = New-Object -ComObject Outlook.Application
$Mail = $Outlook.CreateItem(0)
$Mail.To = "destinatio@mail.com"
$Mail.Subject = "Assunto do Email"
$Mail.Body = "Corpo do email"
#Mail.Send()

 
Batch

::script para exibir a data e a hora atuais

echo %date% %time%

::Script para criar um arquivo para outra pasta

copy C:\Users\user\file.txt D:\Backup\file.txt

::Script para executar um ping em um site
ping www.bing.com


VBScript

'script para exibir uma msg na tela

MsgBox "Olá mundo!"

'script para abrir o internet explorer e navegar para um site

Set objIE = CreateObject("InternetExplorer.Application")
objIE.Visible = True
objIE.Navigate "http://www.bing.com"

'script para criar uma pasta no desktop

Set objFSO = CreateObject("Scripting.FileSystemObject")
strDesktop = objFSO.GetSpecialFolder(0)
objFSO.CreateFolder strDesktop & "\Nova Pasta"

JavaScript

//script para exibir uma msg na tela

WScript.Echo("Olá mundo");

//Script para criar um arquivo de texto no desktop

var fso = new ActiveXObject("Scripting.FileSystemObject");
var desktop = fso.CreateTextFile(desktop + "\\Arquivo.txt",true);
file.write("Este é um texto criado por um script");
file.Close();

//script para abrir Notepad e escrever algo nele

var shell = new ActiveXObject("WScript.shell");
shell.Run("notepad.exe");
WScript.sleep(1000);
shell.SendKeys("Este é um texto escrito por um script");

Tecnicas Avançadas

Parâmetros e argumentos

Permite os scripts mais flexíveis e reutilizáveis adapdando-se em diferentes situações

Funções e módulos
estrituras condicionais
espreções reculares
usar bibliotecar externas

inicio

batch
abra o cmd e digite

set nome=João
echo Olá %nome%

Calculo

set a=5
set b=4
set /a "c=%a%+%b%"

echo O resultado é: %c%

Operações relacionais

@set n1=5
@set n2=2

if %n1% gtr %n2% (echo o número 1 é maior que o número 2.) else if %n1% lss %n2%(echo Os números são iguais)



Manipulação de Arquivos

REM Criar uma parta chamada "MinhaPasta"

mkdir MinhaPasta

REM Criar arquivo txt

type nul> meu arquivo.txt

REM Copiar um arquivo chamado"meuarquivo.txt" para a pasta

copy meuarquivo.txt MinhaPasta

REM Mover a pasta "MinhaPasta" para outro local

move MinhaPasta novalocalizacao\MinhaPasta

REM Renomear o arquivo dentro da pasta

ren NovaLocalizacao\MinhaPasta\meuarquivo.txt NovoNomedeArquivo.txt


REM Deletar A pasta e seu conteúdo

rmdir /s /q localizacao\MinhaPasta


Power Shell

Write-host "Hello, Word"

if($a -gt $b){
	
	Write-Host "A é maior que B"

} else {

	Write-Host"B é maior que A"

for ($i=1;$i-le 5,$i++){

	Write-Host"Iteração $i"

}


Função 

function Saudacao{param ([string]$nome) Write-Host "Olá, $nome!"}

#Chamada função

Saudacao -nome "Amigo"


function Saudacao {
	param(
		[string]$nome,
		[string]$cumprimento
	)
	write-host "$cumprimento,$nome!"
}

#chamando Função

Saudacao -nome "Amigo"
Saudacao -nome "Amigo" -cumprimento "Bom dia"


Script para remoção de malwares no registro

$chaveMaliciosa = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run\EncryptorMalicioso"

if(Test-Path $chaveMaliciosa){
	Write-Host "Removendo chave maliciosa..."
	Remove-Item -Path $chaveMaliciosa -Force
	Write-Host "Chave maliciosa removida com sucesso"
}
else{
	Write-Host "Nenhuma chave maliciosa encontrada no Registro. "	

}


========================================Criptografar mensagem===============================

#Encryption Key (16,24 or 32 bytes)
$encryptionKey = [Text.Encoding]::UTF8.GetBytes("MySecretEncryptionKey")

#text to encrypt
$textToEncrypt = "SENAI123."

#Convert the text to bytes
$bytesToEncrypt = [Text.Encoding]::UTF8.GetBytes($textToEncrypt)

#create AES encryption object
$aes = [System.Security.Cryptography.Aes]::Create()
$aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
$aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7

$aes = [System.Security.Cryptography.Aes]::Create()

$aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
$aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7

#Generate a random IV(inicialization Vector)

$aes.GenerateIV()

#create an encryption stream
$encryptor = $aes.CreateEncryptor()

#Encrypt the bytes
$encryptedBytes = $encryptor.TransformFinalBlock($bytesToEncrypt,0,$bytesToEncrypt.Length)

#Convert the encrypted bytes to Base64 for storange
$encryptedText = [Convert]::ToBase64String($aes.IV + $encryptedBytes)

#Display the Encrypted Text
Write-Host "Encrypted Text: $encryptedText"


==================================descriptografar mensagem======================================

# Convert the Base encrypted text back to bytes
$encryptedBytesWithIV = [Convert]::FromBase64String($encryptedText)
$iv = $encryptedBytesWithIV[0..15]
$encryptedBytesOnly = $encryptedBytesWithIV[16..($encryptedBytesWithIV.Length - 1)]

#Set the IV and decrypt
$aes.IV = $iv
$decryptor = $aes.CreateDecryptor()
$decryptedBytes = $decryptor.TransformFinalBlock($encryptedBytesOnly,0,$encryptedBytesOnly.Length)

#convert the decrypted bytes back to text
$decryptedText = [Text.Encoding]::UTF8.GetString($decryptedBytes)

#Display the decrypted text
Write-Host "Decrypted Text: $decryptedText"

=============================Verificação de politicas de segurança============================


Get-ExecutionPolicy
Get-ProocessMitigation-System
Get-MpPreference | Select-Object-Property *Detection*

Esse script exibe informeções sobre a política de execução, políticas de mitigação de processo e preferências de detecção do Windows Defender

================================Varreduras de portas======================================

Get-NetTCPConnection | Select-Object -Property LocalAddress, LocalPort, RemoteAddress, RemotePort, State
Test-NetConnection -ComputerName localhost -Port 80

Este script Lista as conexões TCP ativas e verifica a conectividade com porta específica


===================================Verificar atividade de logon==============================


Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4624 -or $_.Id -eq 4634} | Select-Object -Property TimeCreated, Id, Message


================================Análise de processos suspeitos====================================

Get-Process | Where-Object{$_.Path -eq $null -and $_.Handles -gt500-and $_.CPU -gt 50}


Escte script lista processos que não tem um caminho de arquivom associado, têm um número significativo de identificadores de objeto ou então usando uma quantidade considerável de CPU

==================================================================================================

===========================================      ================================================
============================================Linux================================================
===========================================       ===============================================





O que é um script? 

É um código para otimizar ou automatizar processos com sistemas computacionais


Importância

Eficiência ; consistência; Resposta rápida a incidentes; Analize de dados; monitoramento contínuo; escalonamento


======================================linguagem Bash============================================

Comentário que serão ignorados coloque # no inicio
Variáveis: 
são usadas para guardar valores ex: nome="Usuário"

Comandos: 
Comando do sistema podem ser executados usando crase('') ou $(). Ex: data=$(date)

Estrutura condicionais:
if, elif e fi são usados para tomada de decisões baseadas em condições.

Estruturas de loop:
for e while permitem repetições várias vezes.

Redirecionamenro de saida:
>(redireciona saída para um arquivo) e >> (Anexa saída de um arquivo).

Teste e comparação:
comando teste (ou[]) é usado para comparação de strings, números e arquivos.

Funções:
Permitem definir blocoas de códigos reutilizáveis 

Argumentos de Linha de Comando:
Variáveis especiais como $1, $2, etc.... permitem passar argumento para argumentos para script.

Interpolação de Variáveis:
Variáveis podem ser usadas dentro de strings com aspas duplas para interpolação.



========================================Comandos==============================================

cd desktop


nano aula1.txt (Abre o nano e cria um arquivo com nome aula1 com extenção txt)

^ no nano é a tecla ctrl


cat aula1.txt (Mostra o conteúdo do arquivo aula1.txt)

cat aula1.txt > teste.txt (Passa o conteúdo de aula1.txt para teste.txt)

clear (Limpa tela)

chmod (edita tipo de arquivos)

chmod +x teste.txt (faz o arquivo teste.txt receber função de executável)

=======================criando um programa=========================
1 crie um txt no nano
2 digite o codigo e salve
ex:
#! /bin/bash
valido=true
count=1
while[$valido]
do
	echo $count
	if[$count -eq 5];
	then
	break
	fi
	((count++))
done

3 Salve o arquivo
4 use chmod +x nomearquivo.txt (Para atricuir função de executável)
5 ./nomedoarquivo.txt (Para executar o programa)

=================================com o for============================
#! /bin/bash
for((count=10; count>0; count--))
do
	echo -n "$count "
	
done

=======================================================================
#! /bin/bash
sudo apt install net-tools (Opcional)
echo "Listando conexões ativas"

netstat 	(Verifica as conexões ativas)
========================================================================

grep "texto procurado" arquivo.txt 
(Acha em um arquivo o texto procurado no arquivo.txt)

=========================================================================

nano atualizacao.txt

**************dentro arquivo*******************************
#! /bin/bash

echo "Verificando Atualizações Disponíveis: "
apt-get update
apt-get upgrade -s | grep "upgraded,"
**************************************************

chmod +x atualizacao.txt
sudo ./atualizacao.txt
===========================================================================


nano vunerabilidade.sh

**************dentro arquivo*******************************
#! /bin/bash
site = "https://www.google.com"
vulnerabilidade="CVE-2014-6271"

echo resultado=$(curl -s -i "$site" | grep "$vulnerabilidade")

if[-n "$resultado"];then 
echo "Vulnerabilidade detectada"
else
echo "Site seguro"
fi

**************************************************

chmod +x vunerabilidade.sh
sudo ./vunerabilidade.sh

=============================================================================

Manipulação de arquivos e diretórios

mkdir testepasta (Cria diretórios/pasta de nome testepasta)
ls		(Listar tudo que tem no local)
cp Oquecopiar paraOndeCopiar (ex: cp teste.txt testepasta)	(Copia arquivos/pasta)

mv (move ou renomear)
ex: mv teste.txt novo.txt (Renomeando arquivo teste.txt para novo.txt)

rm (Remover arquivos/pastas) ex: rm novo.txt (arquivo novo.txt será removido)

Comandos dentros de arquivos
Ex:

===========fora do arquivo=============

nano novo.txt

**************dentro arquivo***********
#!/bin/bash

verificar=$(ls)

echo "Conteúdo do diretório $verificar"

***************************************

chmod +x novo.txt
./novo.txt

==========================================

nano script.txt

**********************dentro arquivo***********

#!/bin/bash

espacoLivre=$(df -h)

echo "Espaço livre em disco:  $espacoLivre"

*************************************************

chmod +x script.txt
./ script.txt
========================================================

Manipulação no script

================fora do arquivo====================
nano mani.txt

******************dentro arquivo*****************

#!/bin/bash

echo "Criando um diretório e cpiando um arquivo"

mkdir novoDiretorio
cp arquivo.txt

echo "Diretório criado e arquivo copiado"

*****************************************************

chmod +x mani.txt
./mani.txt

Listagem de conteudo e renomeação de arquivos

=============================fora do arquivo===================

nano renomeando.txt

*********************************dentro do arquivo***********

#! /bin/bash

echo "Listando conteúdo e renomeando um arquivo"

ls novo_diretorio
mv arquivo.txt novo_arquivo.txt

echo "Arquivo renomeado"
****************************************************************

chmod +x renomeando.txt
./renomeando.txt

portas
============================fora do arquivo==========================

nano portas.sh

*************************dentro do arquivo****************************

#!/bin/bash

host="127.0.0.1"
portas=("80" "22" "443")

for porta in "${portas[@]}";do
	nc -zv "$host" "$porta" > /dev/null 2>&1 
	if[$? -eq 0]; then
		echo "Porta $porta está aberta em $host"
	else
		echo "Porta $porta está fechada em $host"
	fi
done
*********************************************************************

chmod +x portas.sh
./ portas.sh

=======================================================================


========================detecção de tentativa de acesso========================

nano ataque.sh

******************************************************
#! /bin/bash

log_file="auth.log"
limite_tentativas=5

tentativas=$(grep "Failed Password" "log_file" | wc -l)

if ["$tentativas"-ge" limite_tentativas"]; then
	echo "Possivel ataque de força bruta detectado"
else
	echo "Nenhuma tentativa de força bruta"

***********************************************************
chmod +x ataque.sh
./ ataque.sh

===============================================================
vericação de fraquezas

nano falhas.sh

***********************************************************
#!/bin/bash

sistema="Ubuntu"
versao="20.04"

falhas=$(grep "$sistema $versao" cve_database.txt)

if[-n "$falhas"]; then
echo "Falha encontrada no $sistema $versao"
else
echo "Nenhuma falha encontrada"
fi
**************************************************************
chmod +x falhas.sh
./falhas.sh

================================================================

coleta de evidências

nano florence.sh
************************************************************

#!/bin/bash

output_dir="/evidencias"
log_file="auth.log"

mkdir -p "output+dir"
cp "$log_file" "output_dir/syslog.log"
echo "Evidências coletadas"

***************************************************************
chmod +x florence.sh
./florence.sh
